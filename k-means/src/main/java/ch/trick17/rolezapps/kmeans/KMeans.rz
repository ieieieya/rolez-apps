package ch.trick17.rolezapps.kmeans

import rolez.util.Random
import rolez.util.Scanner
import rolez.util.StopWatch

class KMeans {
    
    val dim: int
    val clusters: int
    val numTasks: int
    
    new {
        this.dim = 10;
        this.clusters = 10;
        this.numTasks = 8;
    }
    
    new(dim: int, clusters: int, numTasks: int) {
        this.dim = dim;
        this.clusters = clusters;
        this.numTasks = numTasks;
    }
    
    def pure createDataSet(n: int, random: readwrite Random): readwrite Array[pure Vector[double]] {
        val dataSet = new Array[pure Vector[double]](n);
        for(var i = 0; i < n; i++)
            dataSet.set(i, this.newRandomVector(random));
        return dataSet;
    }
    
    def pure newRandomVector(random: readwrite Random): pure Vector[double] {
        val vec = new VectorBuilder[double](this.dim);
        for(var d = 0; d < this.dim; d++)
            vec.set(d, random.nextDouble);
        return vec.build;
    }
    
    def pure kMeans(dataSet: readonly Array[pure Vector[double]], maxIterations: int):
            readwrite Array[pure Vector[double]] {
        return null;
    }
}

class KMeansRolez extends KMeans {
    
    new {}
    
    new(dim: int, clusters: int, numTasks: int) {
        super(dim, clusters, numTasks);
    }
    
    override pure kMeans(dataSet: readonly Array[pure Vector[double]], maxIterations: int):
            readwrite Array[pure Vector[double]] {
        /* Initialization */
        val random = new Random;
        val centroids = new Array[pure Vector[double]](this.clusters);
        for(var i = 0; i < this.clusters; i++)
            centroids.set(i, this.newRandomVector(random));
        
        val ranges = the ContiguousPartitioner.partition(dataSet.range, this.numTasks);
        val assignments = new Array[readwrite Array[int]](this.numTasks);
        for(var i = 0; i < this.numTasks; i++)
            assignments.set(i, new Array[int](dataSet.length));
        
        /* Computation */
        var iterations = 0;
        var changed = true;
        while(changed && iterations < maxIterations) {
            val tasks = new Array[pure Task[pure Result]](this.numTasks);
            for(var i = 0; i < tasks.length; i++)
                tasks.set(i, this start assignAndUpdate(dataSet, centroids,
                    assignments.get(i), ranges.get(i)));
            
            changed = false;
            val newCentroids = new Array[readwrite VectorBuilder[double]](this.clusters);
            for(var i = 0; i < newCentroids.length; i++)
                newCentroids.set(i, new VectorBuilder[double](this.dim));
            val counts = new Array[int](this.clusters);

            for(var i = 0; i < tasks.length; i++) {
                val result = tasks.get(i).get;
                changed |= result.changed;
                for(var c = 0; c < this.clusters; c++) {
                    val newCentroid = newCentroids.get(c);
                    val resultCentroid = result.centroids.get(c);
                    for(var d = 0; d < this.dim; d++)
                        newCentroid.set(d, newCentroid.get(d) + resultCentroid.get(d));
                    counts.set(c, counts.get(c) + result.counts.get(c));
                }
            }
            
            for(var c = 0; c < this.clusters; c++) {
                val centroid = newCentroids.get(c);
                val count = counts.get(c);
                for(var d = 0; d < this.dim; d++)
                    centroid.set(d, centroid.get(d) / count);
                centroids.set(c, centroid.build);
            }
            iterations++;
        }
        return centroids;
    }
    
    task pure assignAndUpdate(dataSet: readonly Array[pure Vector[double]],
            centroids: readonly Array[pure Vector[double]],
            assignments: readwrite Array[int], range: pure SliceRange): pure Result {
        var changed = false;
        val newCentroids = new Array[readwrite VectorBuilder[double]](this.clusters);
        for(var i = 0; i < this.clusters; i++)
            newCentroids.set(i, new VectorBuilder[double](this.dim));
        val counts = new VectorBuilder[int](centroids.length);
        
        for(var i = range.begin; i < range.end; i += range.step) {
            val vector = dataSet.get(i);
            var min = the Double.POSITIVE_INFINITY;
            var cluster = -1;
            for(var c = 0; c < centroids.length; c++) {
                val distance2 = this.distance2(vector, centroids.get(c));
                if(distance2 < min) {
                    min = distance2;
                    cluster = c;
                }
            }
            if(cluster != assignments.get(i)) {
                changed = true;
                assignments.set(i, cluster);
            }
            val newCentroid = newCentroids.get(cluster);
            for(var d = 0; d < vector.length; d++)
                newCentroid.set(d, newCentroid.get(d) + vector.get(d));
            counts.set(cluster, counts.get(cluster) + 1);
        }
        return new Result(changed, newCentroids, counts.build);
    }
    
    def pure distance2(v1: pure Vector[double], v2: pure Vector[double]): double {
        var sum = 0.0;
        for(var d = 0; d < this.dim; d++) {
            val diff = v1.get(d) - v2.get(d);
            sum += diff * diff;
        }
        return sum;
    }
    
    task pure main(args: readonly Array[pure String]): {
        val n = the Int.parseInt(args.get(0));
        val maxIterations = the Int.parseInt(args.get(1));
        val repetitions = 100;
        val watch = new StopWatch;
        
        val dataSets = new Array[readwrite Array[pure Vector[double]]](repetitions);
        for(var i = 0; i < repetitions; i++)
            dataSets.set(i, this.createDataSet(n, new Random));
        
        the System.out.println("Press Enter to start");
        new Scanner(the System.in).nextLine;
        for(var i = 0; i < repetitions; i++) {
            watch.go;
            this.kMeans(dataSets.get(i), maxIterations);
            the System.out.println(watch.get);
        }
    }
}

pure class Result {
    val changed: boolean
    val centroids: pure Vector[pure Vector[double]]
    val counts: pure Vector[int]
    
    new(changed: boolean, centroids: readwrite Array[readwrite VectorBuilder[double]], counts: pure Vector[int]) {
        this.changed = changed;
        val centroidsBuilder = new VectorBuilder[pure Vector[double]](centroids.length);
        for(var c = 0; c < centroids.length; c++)
            centroidsBuilder.set(c, centroids.get(c).build);
        this.centroids = centroidsBuilder.build;
        this.counts = counts;
    }
}