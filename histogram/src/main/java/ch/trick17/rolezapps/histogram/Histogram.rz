package ch.trick17.rolezapps.histogram

import rolez.io.PrintStream
import ch.trick17.rolezapps.histogram.util.ImageReader

class Histogram {
    def readwrite compute(numTasks: int): {}
}

class HistogramRolez extends Histogram {
    
    val image: readonly Array[readwrite Array[int]]
    
    var rHist: readwrite Array[int]
    var gHist: readwrite Array[int]
    var bHist: readwrite Array[int]
    
    new(image: readonly Array[readwrite Array[int]]) {
        this.image = image;
    }
    
    override readwrite compute(numTasks: int): {
        // partition
        val ranges = the ContiguousPartitioner.partition(this.image.range, numTasks);
        
        val tasks = new Array[pure Task[readwrite HistPart]](numTasks);
        for(var i = 0; i < numTasks; i++)
            tasks.set(i, this start computePart(ranges.get(i)));
        
        this.rHist = tasks.get(0).get.r;
        this.gHist = tasks.get(0).get.g;
        this.bHist = tasks.get(0).get.b;
        for(var i = 1; i < numTasks; i++)
            this.merge(tasks.get(i).get);
    }
    
    task readonly computePart(range: pure SliceRange): readwrite HistPart {
        val r: readwrite Array[int] = new Array[int](256);
        val g: readwrite Array[int] = new Array[int](256);
        val b: readwrite Array[int] = new Array[int](256);
        
        for(var y = range.begin; y < range.end; y+= range.step) {
            val row = this.image.get(y);
            for(var x = 0; x < row.length; x++) {
                val color = new Color(row.get(x));
                r.set(color.r, r.get(color.r) + 1);
                g.set(color.g, g.get(color.g) + 1);
                b.set(color.b, b.get(color.b) + 1);
            }
        }
        return new HistPart(r, g, b);
    }
    
    def readwrite merge(histPart: readonly HistPart): {
        for(var c = 0; c < 256; c++) {
            this.rHist.set(c, this.rHist.get(c) + histPart.r.get(c));
            this.gHist.set(c, this.gHist.get(c) + histPart.g.get(c));
            this.bHist.set(c, this.bHist.get(c) + histPart.b.get(c));
        }
    }
}

class HistPart {
    val r: readwrite Array[int]
    val g: readwrite Array[int]
    val b: readwrite Array[int]
    
    new(r: readwrite Array[int], g: readwrite Array[int], b: readwrite Array[int]) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
}

object HistogramApp {
    
    task pure main: {
        val image = the ImageReader.read("6000000.jpg");
        val histogram = new HistogramRolez(image);
        
        histogram.compute(8);
        this.print(histogram, 80, 8, the System.out);
    }
    
    def pure print(hist: readonly HistogramRolez, width: int, binSize: int,
            out: readonly PrintStream): {
        var max = 0;
        for(var c = 0; c < 256; c++) {
           max = the Math.max(max, hist.rHist.get(c));
           max = the Math.max(max, hist.gHist.get(c));
           max = the Math.max(max, hist.bHist.get(c));
        }
        
        val scaleWidth = width as double / max;
        
        out.println("Red:");
        this.printChannel(hist.rHist, scaleWidth, binSize, out);
        the System.out.println("Green:");
        this.printChannel(hist.gHist, scaleWidth, binSize, out);
        the System.out.println("Blue:");
        this.printChannel(hist.bHist, scaleWidth, binSize, out);
    }
    
    def pure printChannel(hist: readonly Array[int], scaleWidth: double, binSize: int,
            out: readonly PrintStream): {
        var c = 0;
        while(c < 256) {
            var total = 0.0;
            for(var j = 0; j < binSize; j++) {
                total += hist.get(c);
                c++;
            }
            val barSize = (total / binSize * scaleWidth) as int;
            this.printBar(barSize, out);
            out.println;
        }
    }
    
    def pure printBar(size: int, out: readonly PrintStream): {
        for(var i = 0; i < size; i++)
            out.print("â–„");
    }
}