package ch.trick17.rolezapps.histogram

import rolez.io.PrintStream
import ch.trick17.rolezapps.histogram.util.ImageReader

class HistogramRolezEager extends Histogram {
    
    val image: readonly Array[readwrite Array[int]]
    
    var rHist: readwrite Array[int]
    var gHist: readwrite Array[int]
    var bHist: readwrite Array[int]
    
    new(image: readonly Array[readwrite Array[int]]) {
        this.image = image;
    }
    
    override readwrite compute(numTasks: int): {
        // partition
        val ranges = the ContiguousPartitioner.partition(this.image.range, numTasks);
        
        val parts = new Array[readwrite HistPart](numTasks);
        
        parfor(var i = 0; i < numTasks; i++)
        	this.computePart(ranges.get(i), parts.slice(i, i+1), i);
        
        //for(var i = 0; i < numTasks; i++)
        //    tasks.set(i, this start computePart(ranges.get(i)));
        
        this.rHist = parts.get(0).r;
        this.gHist = parts.get(0).g;
        this.bHist = parts.get(0).b;
        for(var i = 1; i < numTasks; i++)
            this.merge(parts.get(i));
    }
    
    // workaround because the returning of results is not yet implemented in  parfor
    task readonly computePart(range: pure SliceRange, results: readwrite Slice[readwrite HistPart], index: int): {
        val r: readwrite Array[int] = new Array[int](256);
        val g: readwrite Array[int] = new Array[int](256);
        val b: readwrite Array[int] = new Array[int](256);
        
        for(var y = range.begin; y < range.end; y+= range.step) {
            val row = this.image.get(y);
            for(var x = 0; x < row.length; x++) {
                val color = new Color(row.get(x));
                r.set(color.r, r.get(color.r) + 1);
                g.set(color.g, g.get(color.g) + 1);
                b.set(color.b, b.get(color.b) + 1);
            }
        }
        results.set(index, new HistPart(r, g, b));
    }
    
    def readwrite merge(histPart: readonly HistPart): {
        for(var c = 0; c < 256; c++) {
            this.rHist.set(c, this.rHist.get(c) + histPart.r.get(c));
            this.gHist.set(c, this.gHist.get(c) + histPart.g.get(c));
            this.bHist.set(c, this.bHist.get(c) + histPart.b.get(c));
        }
    }
}
