package ch.trick17.rolezapps.montecarlo

import rolez.io.FileInputStream
import rolez.util.Scanner
import rolez.util.ArrayList

class RatePath extends Path {
    
    val pathValues: readwrite Array[double]
    
    new(name: pure String, startDate: int, endDate: int, dTime: double,
            pathValues: readwrite Array[double]) {
        super(name, startDate, endDate, dTime);
        this.pathValues = pathValues;
    }
    
    new(other: pure Path, pathValues: readwrite Array[double]) {
        super(other);
        this.pathValues = pathValues;
    }
}

object RatePathReader {
    
    val datumField: int = 4
    val minDate: int = 19000101
    val epsilon: double = 10.0 * the Double.MIN_VALUE
    
    def pure readRatesFile(ratesFile: pure String): readwrite RatePath {
        val scanner = new Scanner(new FileInputStream(ratesFile));
        
        val lines = new ArrayList[pure String];
        while(scanner.hasNextLine)
            lines.add(scanner.nextLine);
        
        val pathValues = new Array[double](lines.size);
        val pathDates = new Array[int](lines.size);
        
        for(var i = 0; i < lines.size; i += 1) {
            val fields = lines.get(i).split(",");
            val date = the Int.parseInt("19" + fields.get(0));
            
            val value = the Double.parseDouble(fields.get(this.datumField));
            if(date <= this.minDate || the Math.abs(value) < this.epsilon)
                the System.exit(1);
            
            pathValues.set(i, value);
            pathDates.set(i, date);
        }
        
        scanner.close;
        return new RatePath(ratesFile, pathDates.get(0), pathDates.get(lines.size - 1),
            1.0 / 365.0, pathValues);
    }
}