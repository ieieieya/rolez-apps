package ch.trick17.rolezapps.montecarlo

import rolez.io.File
import rolez.util.ArrayList
import rolez.util.Scanner

class MonteCarloApp {
    
    val pathStartValue: double = 100.0
    
    val steps: int
    val runs: int
    val numTasks: int

    new(steps: int, runs: int, numTasks: int) {
        this.steps = steps;
        this.runs = runs;
        this.numTasks = numTasks;
    }
    
    def readwrite run: {}
    def readonly avgExpectedReturnRate: double { return 0.0; }
}

class MonteCarloAppRolez extends MonteCarloApp {
    
    val returns: pure Returns
    
    val seeds: readwrite Array[long]
    val results: readwrite ArrayList[double] = new ArrayList[double]
    
    new(steps: int, runs: int, numTasks: int, ratesFile: String) {
        super(steps, runs, numTasks);
        
        this.returns = new Returns(RatePathReader.readRatesFile(ratesFile));
        
        this.seeds = new Array[long](runs);
        for(var i = 0; i < runs; i++)
            this.seeds.set(i, i * 11 as long);
    }
    
    override readwrite run: {
        val partitions = this.seeds.partition(ContiguousPartitioner, this.numTasks);
        val results: readwrite Slice[readwrite ArrayList[double]] = new Array[readwrite ArrayList[double]](this.numTasks);
        
        parfor(var i = 0; i < this.numTasks; i++)
            this.simulate(partitions.get(i), results.slice(i, i+1), i);
        
        for(var i = 0; i < results.range.size; i++)
            this.results.addAll(results.get(i));
    }
    
    task pure simulate(seeds: readonly Slice[long], result: readwrite Slice[readwrite ArrayList[double]], index: int): {
        val results = new ArrayList[double];
        for(var i = seeds.range.begin; i < seeds.range.end; i += seeds.range.step) {
            val mcPath = new MonteCarloPath(this.returns, this.steps);
            mcPath.computeFluctuations(seeds.get(i));
            mcPath.computePathValues(this.pathStartValue);
            results.add(new Returns(mcPath).expectedReturnRate);
        }
        result.set(index, results);
    }
    
    override readonly avgExpectedReturnRate: double {
        var result = 0.0;
        for(var i = 0; i < this.runs; i++)
            result += this.results.get(i);
        result /= this.runs;
        return result;
    }
}

object MonteCarloAppRolezRunner {
    
    val file: String = "Data/hitData"
    val steps: int = 1000
    
    task pure main: {
        val app = new MonteCarloAppRolez(this.steps, 100000, 8, this.file);
        
        System.out.println("Press Enter to start");
        new Scanner(System.in).nextLine;
        
        app.run;
        System.out.println(app.avgExpectedReturnRate);
    }
}