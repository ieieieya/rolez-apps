package ch.trick17.rolezapps.mergesort

import rolez.util.Random
import rolez.util.StopWatch
import rolez.util.Scanner

class Mergesort {
    val maxLevel: int
    
    new {
        this.maxLevel = 3; // 8 tasks
    }
    
    new(maxLevel: int) {
        this.maxLevel = maxLevel;
    }
    
    task pure main(args: readonly Array[pure String]): {
        val n = the Int.parseInt(args.get(0));
        val iterations = 20;
        val watch = new StopWatch;
        
        val arrays = new Array[readwrite Array[int]](iterations);
        
        for(var i = 0; i < iterations; i++)
            arrays.set(i, this.shuffledInts(n));
        
        the System.out.println("Press Enter to start");
        new Scanner(the System.in).nextLine;
        for(var i = 0; i < iterations; i++) {
            watch.go;
            this.sort(arrays.get(i));
            the System.out.println(watch.get);
        }
    }
    
    def pure shuffledInts(n: int): readwrite Array[int] {
        val array = new Array[int](n);
        for(var i = 0; i < n; i++)
            array.set(i, i);
        
        val random = new Random;
        for(var i = n - 1; i > 0; i -= 1) {
            val index: int = random.nextInt(i + 1);
            
            val t = array.get(index);
            array.set(index, array.get(i));
            array.set(i, t);
        }
        return array;
    }
    
    def pure sort(a: readwrite Array[int]): {
        val b = a.clone;
        this.doSort(b, a, 0, a.length, 0);
    }
    
    /**
     * Sorts the given "run" of b into a
     */
    task pure doSort(b: readwrite Slice[int], a: readwrite Slice[int], begin: int, end: int, level: int): {
        if(end - begin < 2)
            return;
        
        if(end - begin == 2) {
            if(b.get(begin) > b.get(begin+1)) {
                a.set(begin, b.get(begin+1));
                a.set(begin+1, b.get(begin));
            }
            return;
        }
        
        // split and recursively sort both runs from a into b
        val middle = (begin + end) / 2;
        if(level < this.maxLevel) {
            // create slices and do left side in parallel
            this start doSort(a.slice( begin, middle), b.slice( begin, middle),  begin, middle, level + 1);
            this   .   doSort(a.slice(middle,    end), b.slice(middle,    end), middle,    end, level + 1);
        }
        else {
            this.doSort(a, b,  begin, middle, level + 1);
            this.doSort(a, b, middle,    end, level + 1);
        }
        
        // merge the resulting runs from b into a
        this.merge(b, a, begin, middle, end);
    }
    
    /**
     * Merges the two halfs (given by begin, middle, end) of b into a
     */
    def pure merge(b: readonly Slice[int], a: readwrite Slice[int], begin: int, middle: int, end: int): {
        var i = begin;
        var j = middle;
        
        for(var k = begin; k < end; k++) {
            if(i < middle && (j >= end || b.get(i) <= b.get(j))) {
                a.set(k, b.get(i));
                i++;
            }
            else {
                a.set(k, b.get(j));
                j++;
            }
        }
    }
}