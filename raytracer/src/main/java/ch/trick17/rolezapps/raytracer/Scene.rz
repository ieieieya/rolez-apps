package ch.trick17.rolezapps.raytracer

import rolez.util.ArrayList

class Scene {
    var view: readwrite View
    var objects: readwrite ArrayList[readwrite Primitive]
    var lights: readwrite ArrayList[readwrite Light]
    var ambientLight: double
    var background: pure Color
    
    def readonly intersect(ray: pure Ray): readonly Intersection {
        var closest: readonly Intersection = null;
        for(var i = 0; i < this.objects.size; i += 1) {
            val intersection = this.objects.get(i).intersect(ray);
            if(intersection != null && (closest == null || intersection.t < closest.t))
                closest = intersection;
        }
        return closest;
    }
}

class Intersection {
    val t: double
    val enter: boolean
    val primitive: readonly Primitive
    
    new(t: double, enter: boolean, primitive: readonly Primitive) {
        this.t = t;
        this.enter = enter;
        this.primitive = primitive;
    }
}

class Moveable {
    def readwrite move(delta: pure Vector3D): { /* to be implemented by subclasses */}
}

class Light extends Moveable {
    var position: pure Vector3D
    var brightness: double
    
    new(position: pure Vector3D, brightness: double) {
        this.position = position;
        this.brightness = brightness;
    }
    
    override readwrite move(delta: pure Vector3D): {
        this.position = this.position.plus(delta);
    }
}

class View extends Moveable {
    var from: pure Vector3D
    var at:   pure Vector3D
    var up:   pure Vector3D
    
    var distance: double
    var angle:    double
    var aspect:   double
    
    override readwrite move(delta: pure Vector3D): {
        this.from = this.from.plus(delta);
    }
}