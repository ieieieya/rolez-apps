package ch.trick17.rolezapps.raytracer

import ch.trick17.rolezapps.raytracer.anim.Moveable

class Primitive extends Moveable {
    var mat: readwrite Material
    
    new(mat: readwrite Material) {
        this.mat = mat;
    }
    
    /* To be implemented by subclasses */
    def readonly normal(point: Vector3D): Vector3D { return null; }
    
    /* To be implemented by subclasses */
    def readonly intersect(ray: Ray): readonly Intersection { return null; }
}

class Material {
    var color: Color
    var kd   : double
    var shine: double
    var ks   : double
    var kt   : double
    var ior  : double // index of refraction
}

class Sphere extends Primitive {
    var center: Vector3D
    var radius: double
    
    new(center: Vector3D, radius: double, mat: readwrite Material) {
        super(mat);
        this.center = center;
        this.radius = radius;
    }
    
    override readwrite move(delta: Vector3D): {
        this.center = this.center.plus(delta);
    }
    
    override readonly normal(point: Vector3D): Vector3D {
        return point.minus(this.center).normalize;
    }
    
    override readonly intersect(ray: Ray): readonly Intersection {
        val diff = this.center.minus(ray.origin);
        val b = diff.dot(ray.direction);
        val r2 = this.radius * this.radius;
        val discr2 = b * b - diff.dot(diff) + r2;
        if(discr2 < 0)
            return null;
        
        val discr = Math.sqrt(discr2);
        var t: double;
        if(b - discr < 0.000001)
            t = b + discr;
        else
            t = b - discr;
        if(t < 0.000001)
            return null;
        else
            return new Intersection(t, diff.dot(diff) > r2 + 0.000001, this);
    }
}

class Plane extends Primitive {
    var normal: Vector3D
    var distance: double
    
    new(normal: Vector3D, distance: double, mat: readwrite Material) {
        super(mat);
        this.normal = normal;
        this.distance = distance;
    }
    
    override readwrite move(delta: Vector3D): {
        // TODO: not supported yet (too lazy)
    }
    
    override readonly normal(point: Vector3D): Vector3D {
        return this.normal.normalize;
    }
    
    override readonly intersect(ray: Ray): readonly Intersection {
        val n = this.normal.normalize;
        val divisor = ray.direction.dot(n);
        if(divisor < 0.000001 && divisor > -0.000001)
            return null;
        
        val t = (-this.distance - ray.origin.dot(n)) / divisor;
        if(t < 0.000001)
            return null;
        else
            return new Intersection(t, divisor < 0, this);
    }
}