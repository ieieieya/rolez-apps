package ch.trick17.rolezapps.raytracer.anim

import rolez.util.ArrayList
import rolez.util.Random
import ch.trick17.rolezapps.raytracer.Raytracer
import ch.trick17.rolezapps.raytracer.util.VideoWriter
import ch.trick17.rolezapps.raytracer.util.ImageWriter

class AnimatorEager extends Animator {
    
	new(raytracer: readwrite Raytracer, scene: readwrite AnimatedScene, writer: readwrite VideoWriter) {
		super(raytracer, scene, writer);
    }
    
    override readwrite render: {
        this.raytracer.scene = this.scene;
        
        var frame1 = new Array[readwrite Array[int]](this.writer.height);
        var frame2 = new Array[readwrite Array[int]](this.writer.height);
        for(var i = 0; i < frame1.length; i++) {
            frame1.set(i, new Array[int](this.writer.width));
            frame2.set(i, new Array[int](this.writer.width));
        }
        
        while(this.scene.time < this.scene.length) {
            this.raytracer.render(frame1);
            
            // swap frames
            val t = frame2;
            frame2 = frame1;
            frame1 = t;
            
            parallel
            	this.writeFrame(this.writer, frame2);
            and
            	this.animationStep(1.0 / this.writer.framerate, this.scene);
            	
            if(this.printProgress)
                the System.out.println(this.scene.time + "/" + this.scene.length);
        }
        this.writer.close;
    }
     
    task pure animationStep(freq: double, scene: readwrite AnimatedScene) : {
    	scene.animationStep(freq);
    }

}