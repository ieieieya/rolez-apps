package ch.trick17.rolezapps.raytracer

class Raytracer {
    
    var numTasks: int = 1
    var maxRecursions: int = 10
    var oversample: int = 1
    var renderLights: boolean = true
    
    var scene: readonly Scene
    
    def readonly render(image: readwrite Array[readwrite Array[int]]): {
        val parts = image.partition(the StripedPartitioner, this.numTasks);
        for(var i = 0; i < parts.length - 1; i++)
            this start renderPart(parts.get(i));
        this.renderPart(parts.get(parts.length - 1));
    }
    
    task readonly renderPart(imagePart: readwrite Slice[readwrite Array[int]]): {
        val view = this.scene.view;
        val width = imagePart.get(imagePart.range.begin).length;
        val height = imagePart.arrayLength;
        
        val frustrumHeight = view.distance * the Math.tan(view.angle);

        val viewDir = view.at.minus(view.from).normalize;
        val viewLeft = view.up.cross(viewDir).normalize.scale(view.aspect * frustrumHeight);
        val viewDown = view.up.minus(viewDir.scale(view.up.dot(viewDir))).normalize.scale(-frustrumHeight);
        
        for(var y = imagePart.range.begin; y < imagePart.range.end; y += imagePart.range.step) {
            for(var x = 0; x < width; x++) {
                val color = this.renderPixel(x, y, width, height, viewDir, viewLeft, viewDown);
                imagePart.get(y).set(x, color.toRgbInt);
            }
        }
    }
    
    def readonly renderPixel(x: int, y: int, width: int, height: int,
            viewDir: pure Vector3D, viewLeft: pure Vector3D, viewDown: pure Vector3D): pure Color {
        val samples = this.oversample;
        val color = new ColorBuilder;
        for(var ySample = 0; ySample < samples; ySample++) {
            for(var xSample = 0; xSample < samples; xSample++) {
                val xLen = 2.0 * (x + xSample as double / samples) / width - 1;
                val yLen = 2.0 * (y + ySample as double / samples) / height - 1;
                val dir = viewDir.plus(viewLeft.scale(xLen)).plus(viewDown.scale(yLen));
                val ray = new Ray(this.scene.view.from, dir.normalize);
                
                color.add(this.trace(ray, 1.0, 0));
                if(this.renderLights)
                    for(var i = 0; i < this.scene.lights.size; i++)
                        this.renderLight(ray, this.scene.lights.get(i), color);
            }
        }
        color.multiply(1.0 / (samples * samples));
        return color.build;
    }
    
    def readonly trace(ray: pure Ray, intensity: double, recursion: int): pure Color {
        if(recursion == this.maxRecursions)
            return the Colors.black;
        
        val intersection = this.scene.intersect(ray);
        if(intersection != null)
            return this.shade(intersection, ray, intensity, recursion);
        else
            return this.scene.background;
    }
    
    def readonly shade(intersection: readonly Intersection, ray: pure Ray,
            intensity: double, recursion: int): pure Color {
        val mat = intersection.primitive.mat;
        
        val point = ray.point(intersection.t);
        var normal = intersection.primitive.normal(point);
        if(ray.direction.dot(normal) > 0)
            normal = normal.negate;
        
        val reflectDir = ray.direction.reflect(normal).normalize;
        val color = new ColorBuilder;
        
        // Lighting
        color.add(mat.color, this.scene.ambientLight);
        for(var i = 0; i < this.scene.lights.size; i++) {
            val light = this.scene.lights.get(i);
            val lightVec = light.position.minus(point);
            if(normal.dot(lightVec) >= 0) {
                val shadowRay = new Ray(point, lightVec);
                val intersect = this.scene.intersect(shadowRay);
                if(intersect == null || intersect.t > lightVec.length)
                    this.light(mat, light, lightVec, normal, reflectDir, color);
            }
        }
        
        // Reflection
        if(mat.ks * intensity > 0.001)
            color.add(this.trace(new Ray(point, reflectDir), intensity * mat.ks, recursion + 1), mat.ks);
        
        // Refraction
        if(mat.kt * intensity > 0.001) {
            var eta: double;
            if(intersection.enter)
                eta = 1 / mat.ior;
            else
                eta = mat.ior;
            val refractRay = new Ray(point, ray.direction.refract(normal, eta));
            color.add(this.trace(refractRay, intensity * mat.kt, recursion + 1), mat.kt);
        }
        
        return color.build;
    }
    
    def readonly light(mat: readonly Material, light: readonly Light, lightVec: pure Vector3D,
            normal: pure Vector3D, reflectDir: pure Vector3D, color: readwrite ColorBuilder): {
        val lightDir = lightVec.normalize;
        val intensity = light.brightness / lightVec.length;
        val shade = intensity * mat.kd * normal.dot(lightDir);
        color.add(mat.color, shade);
        if(mat.shine > 0.000001) {
            val spec = reflectDir.dot(lightDir);
            if(spec > 0.000001)
                color.add(the Math.pow(spec, mat.shine / intensity));
        }
    }
    
    def readonly renderLight(ray: pure Ray, light: readonly Light, color: readwrite ColorBuilder): {
        // Basically the same as specular highlights on a surface. It kind of would make
        // sense to put this in the trace method and let it also handle specular highlights
        // on surfaces, but only kind of...
        val lightVec = light.position.minus(ray.origin);
        val intersect = this.scene.intersect(new Ray(ray.origin, lightVec));
        if(intersect == null || intersect.t > lightVec.length) {
            val intensity = light.brightness / lightVec.length;
            val spec = ray.direction.dot(lightVec.normalize);
            if(spec > 0.000001)
                color.add(the Math.pow(spec, 50 / intensity));
        }
    }
}