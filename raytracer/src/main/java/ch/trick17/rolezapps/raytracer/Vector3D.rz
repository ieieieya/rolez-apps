package ch.trick17.rolezapps.raytracer

pure class Vector3D {
    
    val x: double
    val y: double
    val z: double
    
    new(x: double, y: double, z: double) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    
    def pure length: double {
        return Math.sqrt(this.dot(this));
    }
    
    def pure negate: Vector3D {
        return new Vector3D(-this.x, -this.y, -this.z);
    }
    
    def pure plus(other: Vector3D): Vector3D {
        return new Vector3D(this.x + other.x, this.y + other.y, this.z + other.z);
    }
    
    def pure minus(other: Vector3D): Vector3D {
        return new Vector3D(this.x - other.x, this.y - other.y, this.z - other.z);
    }
    
    def pure scale(t: double): Vector3D {
        return new Vector3D(this.x * t, this.y * t, this.z * t);
    }
    
    def pure dot(other: Vector3D): double {
        return this.x * other.x + this.y * other.y + this.z * other.z;
    }
    
    def pure cross(other: Vector3D): Vector3D {
        return new Vector3D(
            this.y * other.z - this.z * other.y,
            this.z * other.x - this.x * other.z,
            this.x * other.y - this.y * other.x
        );
    }
    
    def pure reflect(normal: Vector3D): Vector3D {
        return this.scale(1 / Math.abs(this.dot(normal))).plus(normal.scale(2.0));
    }
    
    def pure refract(normal: Vector3D, eta: double): Vector3D {
        val c1 = -this.dot(normal);
        val cs2 = 1 - eta * eta * (1 - c1 * c1);
        return this.scale(eta).plus(normal.scale(eta * c1 - Math.sqrt(cs2)));
    }
    
    def pure normalize: Vector3D {
        val length = this.length;
        if(length > 0 && length != 1.0)
            return new Vector3D(this.x / length, this.y / length, this.z / length);
        else
            return this;
    }
    
    override readonly toString: readonly String {
        return "(" + this.x + ", " + this.y + ", " + this.z + ")";
    }
}