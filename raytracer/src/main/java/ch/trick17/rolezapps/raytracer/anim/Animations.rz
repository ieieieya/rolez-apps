package ch.trick17.rolezapps.raytracer.anim

import ch.trick17.rolezapps.raytracer.Color
import ch.trick17.rolezapps.raytracer.Light
import ch.trick17.rolezapps.raytracer.Scene
import ch.trick17.rolezapps.raytracer.Vector3D

class LinearMovement extends SimpleAnimation {
    
    val obj: readwrite Moveable
    val deltaPerS: Vector3D
    
    new(duration: Duration, obj: readwrite Moveable, deltaPerS: Vector3D) {
        super(duration);
        this.obj = obj;
        this.deltaPerS = deltaPerS;
    }
    
    override readwrite animationStep(time: double, timeStep: double): {
        this.obj.move(this.deltaPerS.scale(timeStep));
    }
}

class CircularMovement extends SimpleAnimation {
    
    val obj: readwrite Moveable
    val u1: Vector3D
    val u2: Vector3D
    val thetaPerS: double
    
    new(duration: Duration, obj: readwrite Moveable, toCenter: Vector3D, up: Vector3D,
            thetaPerS: double) {
        super(duration);
        this.obj = obj;
        this.u1 = toCenter.negate;
        this.u2 = up.cross(this.u1).normalize.scale(this.u1.length);
        this.thetaPerS = thetaPerS;
    }
    
    override readwrite animationStep(time: double, timeStep: double): {
        val oldTheta = (time - this.duration.begin - timeStep) * this.thetaPerS;
        val newTheta = (time - this.duration.begin) * this.thetaPerS;
        val delta = this.u1.scale(Math.cos(newTheta) - Math.cos(oldTheta))
                .plus(this.u2.scale(Math.sin(newTheta) - Math.sin(oldTheta)));
        this.obj.move(delta);
    }
}

class BrightnessChange extends SimpleAnimation {
    
    val light: readwrite Light
    val changePerS: double
    
    new(duration: Duration, light: readwrite Light, changePerS: double) {
        super(duration);
        this.light = light;
        this.changePerS = changePerS;
    }
    
    override readwrite animationStep(time: double, timeStep: double): {
        this.light.brightness = Math.max(0.0, this.light.brightness + this.changePerS * timeStep);
    }
}

class AmbientLightChange extends SimpleAnimation {
    
    val scene: readwrite Scene
    val changePerS: double
    
    new(duration: Duration, scene: readwrite Scene, changePerS: double) {
        super(duration);
        this.scene = scene;
        this.changePerS = changePerS;
    }
    
    override readwrite animationStep(time: double, timeStep: double): {
        this.scene.ambientLight += this.changePerS * timeStep;
    }
}

class BackgroundChange extends SimpleAnimation {
    
    val scene: readwrite Scene
    val rChangePerS: double
    val gChangePerS: double
    val bChangePerS: double
    
    new(duration: Duration, scene: readwrite Scene,
            rChangePerS: double, gChangePerS: double, bChangePerS: double) {
        super(duration);
        this.scene = scene;
        this.rChangePerS = rChangePerS;
        this.gChangePerS = gChangePerS;
        this.bChangePerS = bChangePerS;
    }
    
    override readwrite animationStep(time: double, timeStep: double): {
        val bg = this.scene.background;
        this.scene.background = new Color(
            bg.r + this.rChangePerS * timeStep,
            bg.g + this.gChangePerS * timeStep,
            bg.b + this.bChangePerS * timeStep
        );
    }
}