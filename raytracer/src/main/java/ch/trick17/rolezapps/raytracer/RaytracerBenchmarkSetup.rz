package ch.trick17.rolezapps.raytracer

import ch.trick17.rolezapps.raytracer.anim.AnimatorApp
import ch.trick17.rolezapps.raytracer.anim.AnimatedScene
import rolez.util.Random

class RaytracerBenchmarkSetup {
    def readwrite runRaytracer: int { return 0; }
}

class RaytracerBenchmarkSetupRolez extends RaytracerBenchmarkSetup {
    
    val raytracer: readwrite Raytracer = new Raytracer
    val image: readwrite Array[readwrite Array[int]]
    
    new(height: int, numTasks: int, random: readwrite Random) {
        val scene = this.createBenchmarkScene(random);
        val width = (height * scene.view.aspect) as int;
        
        this.image = new Array[readwrite Array[int]](height);
        for(var i = 0; i < height; i += 1)
            this.image.set(i, new Array[int](width));
        
        this.raytracer.numTasks = numTasks;
        this.raytracer.maxRecursions = 5;
        this.raytracer.scene = scene;
    }
    
    def pure createBenchmarkScene(random: readwrite Random): readwrite Scene {
        val scene = new AnimatedScene(30.0);
        the AnimatorApp.buildScene(scene, random);
        for(var t = 1; t <= 8; t += 1)
            scene.animationStep(1.0);
        return scene;
    }
    
    override readwrite runRaytracer: int {
        this.raytracer.render(this.image);
        return this.image.get(0).get(0);
    }
}