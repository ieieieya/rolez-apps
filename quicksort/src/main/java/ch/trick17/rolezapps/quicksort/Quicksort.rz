package ch.trick17.rolezapps.quicksort

import rolez.util.Random
import rolez.util.StopWatch

class Quicksort {
    val minTaskSize: int = 500
    
    task pure main(args: readonly Array[pure String]): {
        val n = the Int.parseInt(args.get(0));
        val array = this.shuffledInts(n);
        
        val watch = new StopWatch.go;
        val sortTask = this start sort(array);
        
        sortTask.get;
        the System.out.println(watch.get);
    }
    
    def pure shuffledInts(n: int): readwrite Array[int] {
        val array = new Array[int](n);
        for(var i = 0; i < n; i += 1)
            array.set(i, i);
        
        val random = new Random;
        for(var i = n - 1; i > 0; i -= 1) {
            val index: int = random.nextInt(i + 1);
            
            val t = array.get(index);
            array.set(index, array.get(i));
            array.set(i, t);
        }
        return array;
    }
    
    task pure sort(s: readwrite Slice[int]): {
        var  left = s.range.begin;
        var right = s.range.end - 1;
        
        val pivot = this.pivot(s);
        while(left <= right) {
            while(s.get( left) < pivot)  left += 1;
            while(s.get(right) > pivot) right -= 1;
            if(left <= right) {
                val temp = s.get(left);
                s.set(left, s.get(right));
                s.set(right, temp);
                left += 1;
                right -= 1;
            }
        }
        
        if(s.range.begin < right) {
            val leftSlice = s.slice(s.range.begin, right + 1, 1);
            if(leftSlice.range.size > this.minTaskSize)
                this start sort(leftSlice);
            else
                this.sort(leftSlice);
        }
        if(left < s.range.end) {
            val rightSlice = s.slice(left, s.range.end, 1);
            if(rightSlice.range.size > this.minTaskSize)
                this start sort(rightSlice);
            else
                this.sort(rightSlice);
        }
    }
    
    def pure pivot(s: readonly Slice[int]): int {
        val l = s.get(s.range.begin);
        val m = s.get(s.range.begin + s.range.size / 2);
        val r = s.get(s.range.end - 1);
        if(l < m) {
            if(m < r) return m;
            else if(l < r) return l;
            else return r;
        }
        else { // m <= l
            if(l < r) return l;
            else if(m < r) return r;
            else return m;
        }
    }
}